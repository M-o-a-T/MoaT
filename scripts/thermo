#!/usr/bin/python3

import asyncclick as click
from moat.micro.main import get_link, add_client_hooks
from moat.util import attrdict, P, yload, Path
from distkv.client import open_client

import anyio

@click.command
@click.option("-s","--socket",help="MoaT multiplexer socket", required=True)
async def main(socket):
    """Read temperatures"""
    obj = attrdict()
    obj.socket = socket
    obj.debug=1
    with open("/etc/distkv.cfg") as cff:
        cfg = yload(cff)
    async with get_link(obj) as m, open_client(**cfg) as dkv:
        add_client_hooks(m)
        await m.send(["sys","load"], n="i",m="i2c.Cmd")
        cd = await m.send(["i","open"], c=5,d=4)
        thl = await m.send(["i","scan"], cd=cd)
        tw={}

        t_low=43
        t_high=45
        tx_low=23
        tx_high=25
        d = await dkv.get(P("home.ass.dyn.switch.esp_s3.relay.state"))
        t_on=d.value
        tx_on=True

        n=0
        while True:
            for a in thl:
                t = await m.send(["i","wrrd"], cd=cd, i=a, buf=bytearray((5,)), n=2)
                t = int.from_bytes(t,byteorder="big")
                s = t & 0x1000
                t = (t &0xFFF)/16
                if s:
                    t = -t
                tw[a] = t
                if not n%5:
                    print(f"{a:2d} {t:7.4f}", end="   ")
            if not n%5:
                print()
                await dkv.set(P("home.ass.dyn.sensor.temp.bad_wall.state"), value=tw[25], idem=True)
                await dkv.set(P("home.ass.dyn.sensor.temp.bad_wall_heat.state"), value=tw[30], idem=True)
                await dkv.set(P("home.ass.dyn.sensor.temp.bad_room.state"), value=tw[24], idem=True)
            tx=max(tw[24],tw[25])
            if tx_on:
                if tx > tx_high:
                    tx_on = False
            else:
                if tx < tx_low:
                    tx_on = True
            t=tw[30]
            if t_on:
                if t > t_high:
                    t_on = False
            else:
                if t < t_low:
                    t_on = True
            await dkv.set(P("home.ass.dyn.switch.esp_s3.relay.cmd"), value=(t_on and tx_on))
            await anyio.sleep(5)
            n += 1


click._anyio_backed="trio"
main()
